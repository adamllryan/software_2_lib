BY SUBMITTING THIS FILE TO CARMEN, I CERTIFY THAT I HAVE STRICTLY ADHERED
TO THE TENURES OF THE OHIO STATE UNIVERSITY’S ACADEMIC INTEGRITY POLICY
WITH RESPECT TO THIS ASSIGNMENT.

THIS IS THE README FILE FOR LAB 1.

Name: 
	
1.	UNIX is proprietary system (i.e. you must purchase a license) while Linux is an Open Source system.  An Open Source system, however, is not always “free”. Why?  

	You may have to pay for support with an open source system, even if the system itself is free. 

2.	Name another difference between Unix/Linux from your required reading.

	Linux and Unix both have a differing file system support. 	

3.	What made UNIX different from all other commercially available software systems when it was initially developed?

	Unix was both multi user and multi purpose. Also provided the tools to make it available on many different pieces of hardware. 

4.	What operating system covers the widest range of hardware in the world?

	Linux covers the most and is available on most pieces of hardware. 

5.	Why was the C programming language initially created? 

	C was created initially to be the ideal language to develop Unix with. 

6.	What version of the mkdir command is running on stdlinux?  What mkdir option did you use to determine this?

	mkdir 8.22; found using man mkdir and mkdir --version. 
7.      What does the wc -l  instruction do?  The manual page for that instruction says prints the newline count, but what important information does that count tell you?

        wc -l prints out the newline count of files, this tells us the number of lines in a program.

8.      Describe one difference between what you observed in the C programming language code in lab1.c and either Java or C++ that you have used before.  Describe one similarity.

        C has a slightly different syntax than Java (such as imports/include, printf/print/println, lack of JIT for for loops and such). A similarity is that the imports, prints, and for loops function the same. A difference is that C looks to have #ifdef which I have not seen in Java.

9.      How is white space (tabs/newlines/returns, spaces, etc.) handled within a C program file?  Do you think this “feature” of C program files is a good thing or a bad thing?  Why?

        White space is given special characters which is good in my opinion because it is easy to use and add formatting to programs. However, they are sometimes confusing to read.

10.     When a line of code is printed out after the next command in gdb, that line of code has just finished executing.  True or False?

        False because it prints out the line it will run next.

11.     What is the value of getchar_return_value at GDB item #4?  Is this what you expected to see?

        The value of getchar_return_value is 0x31 or '1'. I expected to see the char value, but subtracting '0' makes sense that nothing changes. New value became 0x32 or '2'.

12.     What is the value of maxEntries variable at GDB item #5?

        maxEntries is 15.

13.     What were the 15 hexadecimal values in the variable getchar_return_value as it read in each successive value from input?

        0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x20 0x70 0x65 0x61 0x63 0x68 0x65 0x73

14.     What is the relationship between the ASCII value of a digit and the actual value it represents?

        The ASCII value of a digit is 48 plus that digit.

15.     How does the output of the program change at GDB item #7 from the output seen prior?

        output becomes 0x40 0x61 0x6e 0x61 0x6e 0x61 or @anana

16.     Answer the questions asked in item #10 here.

        I expected the newline to be dropped and all the characters counted, but that did not happen. The 'E' was never printed because it incremented with the newline. The newline was treated as its own character and printed also. Newline was printed between 5 and A.

        Are these values what you expected to see?  If so, why?  If not, what did you observe/learn?

        To some extent, yes, but I wasn't thinking how whitespace characters would be interpreted in the program. But it does make sense.

17.     Describe how you created the breakpoint in your program while using ddd instead of gdb.

        open file in Fastx3 ddd lab1 and then highlight a line. Then press the break button in the menu bar.

18.     Edit the Makefile.  On the line that starts out "gcc_opt =" close to the top of the file,  put " -D DEBUG" (do not put the double quotes in the file).  Now say "touch lab1.c".  Rerun the program using 6 and banana.  Does the output change?  If so, how?

        Yes, it printed out "entering function" and "exiting funcion" in addition to the regular output.

19.     What do you think of the make command?  [2-3 sentences]

        I think it is a lot of work to set up. I understood nothing inside the Makefile, but it did make it easier to build the program after it was set up.



